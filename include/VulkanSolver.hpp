#pragma once
#include "Solver.hpp"
#include "VulkanUtils.hpp"
#include "PCGUtils.h"

struct VulkanSolver : public Solver {
    VulkanSolver() = default;
    void solve_pre_pressure(Real &dt) override;
    void solve_pressure(Real &res, uint32_t &it) override;
    void solve_post_pressure() override;
    void initialize() override;
    ~VulkanSolver();
  private:
    void record_simulation_step(int command_idx);
    void record_conjugate_gradient_solver(int command_idx);
    void record_sor_solver(int command_idx);
    void record_post_pressure(int command_idx);
    GPUSimulation simulation;
    UBOData ubo_data;
    Buffer ubo_buffer;
    Buffer cell_buffer;
    Buffer neighborhood_buffer;
    Buffer u_buffer;
    Buffer v_buffer;
    Buffer f_buffer;
    Buffer g_buffer;
    Buffer t_new_buffer;
    Buffer t_old_buffer;
    Buffer rs_buffer;
    Buffer p_buffer;
    Buffer residual_buffer;
    Buffer scratch_buffer;
    Buffer a_data_buffer;
    Buffer a_offset_buffer;
    Buffer m_data_buffer;
    Buffer m_offset_buffer;
    Buffer d_buffer;
    Buffer spmv_result_buffer;
    Buffer counter_buffer;
    Buffer r_buffer;
    Buffer z_buffer;
    Buffer deltas_buffer;
    Buffer dt_buffer;
    Buffer u_boundary_matrix_buffer;
    Buffer v_boundary_matrix_buffer;
    Buffer u_rhs_buffer;
    Buffer v_rhs_buffer;
    Buffer u_row_start;
    Buffer v_row_start;
    Buffer u_col_index;
    Buffer v_col_index;
    Buffer t_rhs_buffer;
    Buffer t_row_start;
    Buffer t_col_index;
    Buffer t_boundary_matrix_buffer;

    Buffer k_buffer;
    Buffer eps_buffer;
    Buffer k_old_buffer;
    Buffer eps_old_buffer;
    Buffer nu_t_buffer;
    Buffer nu_i_buffer;
    Buffer nu_j_buffer;
    Buffer dists_buffer;
    Buffer s_buffer;
    Buffer nu_t_residual_buffer;
    Buffer keps_residual_buffer;

    Pipeline fg_pipeline;
    Pipeline rs_pipeline;
    Pipeline vel_pipeline;
    Pipeline p_pipeline_red;
    Pipeline p_pipeline_black;
    Pipeline residual_pipeline;
    Pipeline p_boundary_pipeline;
    Pipeline v_boundary_pipeline;
    Pipeline fg_boundary_pipeline;
    Pipeline spmv_a_pipeline;
    Pipeline saxpy_0_pipeline;
    Pipeline saxpy_1_pipeline;
    Pipeline saxpy_2_pipeline;
    Pipeline vec_dot_vec_0_pipeline;
    Pipeline vec_dot_vec_1_pipeline;
    Pipeline vec_dot_vec_2_pipeline;
    Pipeline spmv_m_pipeline;
    Pipeline saxpy_3_pipeline;
    Pipeline calc_t_pipeline;
    Pipeline boundary_t_branchless;
    Pipeline div_pipeline;
    Pipeline div_store_pipeline;
    Pipeline reduce_pipeline;
    Pipeline inc_pipeline;
    Pipeline negate_pipeline;
    Pipeline min_max_uv_pipeline;
    Pipeline reduce_u_pipeline;
    Pipeline reduce_v_pipeline;
    Pipeline calc_dt_pipeline;
    Pipeline boundary_uv_branchless_pipeline;
    Pipeline sqrt_residual_pipeline;

    Pipeline calc_nu_t_pipeline;
    Pipeline calc_nu_ij_pipeline;
    Pipeline calc_k_epsilon_pipeline;
    Pipeline nu_t_boundary_pipeline;
    Pipeline min_nu_t_pipeline;
    Pipeline max_k_eps_pipeline;
    Pipeline reduce_k_pipeline;
    Pipeline reduce_eps_pipeline;
    Pipeline reduce_nu_t_pipeline;

    uint64_t timestamps[6] = {};
    SparseMatrix<Real> A;
    SparseMatrix<Real> U;
    SparseMatrix<Real> V;
    SparseMatrix<Real> T;
    FixedSparseMatrix<Real> U_fixed;
    FixedSparseMatrix<Real> V_fixed;
    FixedSparseMatrix<Real> T_fixed;
    DiagonalSparseMatrix<Real> spai;
    std::vector<Real> U_RHS;
    std::vector<Real> V_RHS;
    std::vector<Real> T_RHS;
};